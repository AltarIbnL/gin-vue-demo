{"ast":null,"code":"import _objectSpread from \"E:/seafile/file/GO/pratical_practice/vue/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// eslint-disable-next-line import/no-extraneous-dependencies\n// import { required, minLength,maxLength } from 'vuelidate/lib/validators';\nimport { required, minLength } from 'vuelidate/lib/validators'; // const telephoneValidator = (value) => /^\\d(11)$/.test(value);\n\nimport customValidator from '@/helper/validator';\nexport default {\n  data: function data() {\n    return {\n      user: {\n        name: '',\n        telephone: '',\n        password: ''\n      },\n      validation: null\n    };\n  },\n  // vuelidate来验证当前的密码为多少位\n  validations: {\n    user: {\n      name: {},\n      telephone: {\n        required: required,\n        telephone: customValidator.telephoneValidator // minLength: minLength(11),\n        // maxLength: maxLength(11),\n\n      },\n      password: {\n        required: required,\n        minLength: minLength(6)\n      }\n    }\n  },\n  methods: {\n    validateState: function validateState(name) {\n      // 这里是es6 解构赋值\n      var _this$$v$user$name = this.$v.user[name],\n          $dirty = _this$$v$user$name.$dirty,\n          $error = _this$$v$user$name.$error;\n      return $dirty ? !$error : null;\n    },\n    register: function register() {\n      var _this = this;\n\n      // 验证数据,在没有用户与表单交互的情况下依旧可以触发表单验证\n      this.$v.user.$touch();\n\n      if (this.$v.user.$anyError) {\n        return;\n      } // 请求,监听9090端口\n\n\n      var api = 'http://localhost:9090/api/auth/register';\n      this.axios.post(api, _objectSpread({}, this.user)).then(function (res) {\n        // 保存token\n        console.log(res.data);\n        localStorage.setItem('token', res.data.data.token); // 跳转主页\n      }).catch(function (err) {\n        // 跳转失败,并出现弹窗显示数据验证失败\n        console.log('err:', err.response.data.msg);\n\n        _this.$bvToast.toast(err.response.data.msg, {\n          title: '数据验证错误',\n          variant: 'danger',\n          solid: true\n        });\n      });\n      console.log('register');\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACA;AACA,+D,CAEA;;AACA;AACA;EACAA,IADA,kBACA;IACA;MACAC;QACAC,QADA;QAEAC,aAFA;QAGAC;MAHA,CADA;MAMAC;IANA;EAQA,CAVA;EAWA;EACAC;IACAL;MACAC,QADA;MAGAC;QACAI,kBADA;QAEAJ,6CAFA,CAGA;QACA;;MAJA,CAHA;MASAC;QACAG,kBADA;QAEAC;MAFA;IATA;EADA,CAZA;EA4BAC;IACAC,aADA,yBACAR,IADA,EACA;MACA;MACA;MAAA;MAAA;MACA;IACA,CALA;IAMAS,QANA,sBAMA;MAAA;;MACA;MACA;;MACA;QACA;MACA,CALA,CAMA;;;MACA;MACA;QACA;QACAC;QACAC,mDAHA,CAIA;MACA,CALA,EAKAC,KALA,CAKA;QACA;QACAF;;QACA;UACAG,eADA;UAEAC,iBAFA;UAGAC;QAHA;MAKA,CAbA;MAcAL;IACA;EA7BA;AA5BA","names":["data","user","name","telephone","password","validation","validations","required","minLength","methods","validateState","register","console","localStorage","catch","title","variant","solid"],"sourceRoot":"src/views/Register","sources":["Register.vue"],"sourcesContent":["<template>\n  <div class=\"register\">\n    <b-row class=\"mt-5\">\n      <b-col md=\"8\" offset-md=\"2\" lg=\"6\" offset-lg=\"3\">\n    <b-card title=\"注册\">\n    <b-form >\n      <b-form-group label=\"姓名\">\n        <!-- 定义一个v的对象，根据我们定义的validation生成了属性，每个属性都有自己的model  -->\n       <b-form-input\n          v-model=\"$v.user.name.$model\"\n          type=\"text\"\n          required\n          placeholder=\"输入用户的名称(选填)\"\n        ></b-form-input>\n      </b-form-group>\n      <b-form-group label=\"手机号\">\n        <b-form-input\n          v-model=\"$v.user.telephone.$model\"\n          type=\"number\"\n          required\n          placeholder=\"输入手机号\"\n          :state=\"validateState('telephone')\"\n        ></b-form-input>\n        <b-form-invalid-feedback :state=\"validateState('telephone')\">\n          手机号必须为11位\n        </b-form-invalid-feedback>\n      </b-form-group>\n      <b-form-group label=\"密码\">\n        <b-form-input\n          v-model=\"$v.user.password.$model\"\n          type=\"password\"\n          required\n          placeholder=\"输入您的密码\"\n          :state=\"validateState('password')\"\n        ></b-form-input>\n        <b-form-invalid-feedback :state=\"validateState('password')\">\n          密码必须大于等于6位\n        </b-form-invalid-feedback>\n      </b-form-group>\n      <b-form-group>\n       <b-button @click=\"register\" variant=\"primary\" block>注册</b-button>  <!-- block让按钮占满容器-->\n      </b-form-group>\n    </b-form>\n    </b-card>\n      </b-col>\n    </b-row>\n  </div>\n</template>\n<script>\n// eslint-disable-next-line import/no-extraneous-dependencies\n// import { required, minLength,maxLength } from 'vuelidate/lib/validators';\nimport { required, minLength } from 'vuelidate/lib/validators';\n\n// const telephoneValidator = (value) => /^\\d(11)$/.test(value);\nimport customValidator from '@/helper/validator';\nexport default {\n  data() {\n    return {\n      user: {\n        name: '',\n        telephone: '',\n        password: '',\n      },\n      validation: null,\n    };\n  },\n  // vuelidate来验证当前的密码为多少位\n  validations: {\n    user: {\n      name: {\n      },\n      telephone: {\n        required,\n        telephone: customValidator.telephoneValidator,\n        // minLength: minLength(11),\n        // maxLength: maxLength(11),\n      },\n      password: {\n        required,\n        minLength: minLength(6),\n      },\n    },\n  },\n  methods: {\n    validateState(name) {\n      // 这里是es6 解构赋值\n      const { $dirty, $error } = this.$v.user[name];\n      return $dirty ? !$error : null;\n    },\n    register() {\n      // 验证数据,在没有用户与表单交互的情况下依旧可以触发表单验证\n      this.$v.user.$touch();\n      if (this.$v.user.$anyError) {\n        return;\n      }\n      // 请求,监听9090端口\n      const api = 'http://localhost:9090/api/auth/register';\n      this.axios.post(api, { ...this.user }).then((res) => {\n        // 保存token\n        console.log(res.data);\n        localStorage.setItem('token', res.data.data.token);\n        // 跳转主页\n      }).catch((err) => {\n        // 跳转失败,并出现弹窗显示数据验证失败\n        console.log('err:', err.response.data.msg);\n        this.$bvToast.toast(err.response.data.msg, {\n          title: '数据验证错误',\n          variant: 'danger',\n          solid: true,\n        });\n      });\n      console.log('register');\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module"}