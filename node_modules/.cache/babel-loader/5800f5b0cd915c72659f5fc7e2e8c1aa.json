{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { required, minLength, maxLength } from 'vuelidate/lib/validators'; // import { required, minLength } from 'vuelidate/lib/validators';\n// const telephoneValidator = (value) => /^\\d(11)$/.test(value);\n// import customValidator from '@/helper/validator';\n\nimport storageService from '../../../service/storageService';\nimport userService from '../../../service/userService';\nexport default {\n  data: function data() {\n    return {\n      user: {\n        name: '',\n        telephone: '',\n        password: ''\n      },\n      validation: null\n    };\n  },\n  // vuelidate来验证当前的密码为多少位\n  validations: {\n    user: {\n      name: {},\n      telephone: {\n        required: required,\n        // telephone: customValidator.telephoneValidator,\n        minLength: minLength(11),\n        maxLength: maxLength(11)\n      },\n      password: {\n        required: required,\n        minLength: minLength(6)\n      }\n    }\n  },\n  methods: {\n    validateState: function validateState(name) {\n      // 这里是es6 解构赋值\n      var _this$$v$user$name = this.$v.user[name],\n          $dirty = _this$$v$user$name.$dirty,\n          $error = _this$$v$user$name.$error;\n      return $dirty ? !$error : null;\n    },\n    register: function register() {\n      var _this = this;\n\n      // 验证数据,在没有用户与表单交互的情况下依旧可以触发表单验证\n      this.$v.user.$touch();\n\n      if (this.$v.user.$anyError) {\n        return;\n      } // 请求,监听9090端口\n      // const api = 'http://localhost:9090/api/auth/register';\n      // 返回用户填入的 name telephone password\n      // this.axios.post(api,{...this.user})\n      // userService.register(this.user)\n\n\n      userService.register(this.user).then(function (res) {\n        // 前面的register是用户输入完之后发给后端，then是执行接收到后端返回的数据以后,在后端的register之后\n        // 保存token\n        console.log(res.data);\n\n        _this.$store.commit('userModule/SET_TOKEN', res.data.token); // 将token储存在localstorage\n        // localStorage.setItem('token', res.data.token);  //将token储存在localstorage\n        // storageService.set(storageService.USER_TOKEN, res.data.token); // 将token储存在localstorage\n\n\n        userService.info().then(function (response) {\n          // 从后端的info页面获取数据\n          // 保存用户信息\n          _this.$store.commit('userModule/SET_USERINFO', response.data.data.user); // 将用户信息储存在vuex中，代码在store/index 和module user.js中\n          // storageService.set(storageService.USER_INFO, JSON.stringify(response.data.data.user));\n          // 跳转主页\n\n\n          _this.$router.replace({\n            name: 'home'\n          });\n        });\n      }).catch(function (err) {\n        // 跳转失败,并出现弹窗显示数据验证失败\n        console.log('err:', err.response.data.msg);\n\n        _this.$bvToast.toast(err.response.data.msg, {\n          title: '数据验证错误',\n          variant: 'danger',\n          solid: true\n        });\n      });\n      console.log('register');\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACA,0E,CACA;AAEA;AACA;;AACA;AACA;AACA;EACAA,IADA,kBACA;IACA;MACAC;QACAC,QADA;QAEAC,aAFA;QAGAC;MAHA,CADA;MAMAC;IANA;EAQA,CAVA;EAWA;EACAC;IACAL;MACAC,QADA;MAGAC;QACAI,kBADA;QAEA;QACAC,wBAHA;QAIAC;MAJA,CAHA;MASAL;QACAG,kBADA;QAEAC;MAFA;IATA;EADA,CAZA;EA4BAE;IACAC,aADA,yBACAT,IADA,EACA;MACA;MACA;MAAA;MAAA;MACA;IACA,CALA;IAMAU,QANA,sBAMA;MAAA;;MACA;MACA;;MACA;QACA;MACA,CALA,CAMA;MACA;MACA;MACA;MACA;;;MACAC;QAAA;QACA;QACAC;;QACA,4DAHA,CAGA;QACA;QACA;;;QACAD;UAAA;UACA;UACA,wEAFA,CAEA;UACA;UACA;;;UACA;YAAAX;UAAA;QACA,CANA;MAOA,CAbA,EAaAa,KAbA,CAaA;QACA;QACAD;;QACA;UACAE,eADA;UAEAC,iBAFA;UAGAC;QAHA;MAKA,CArBA;MAsBAJ;IACA;EAxCA;AA5BA","names":["data","user","name","telephone","password","validation","validations","required","minLength","maxLength","methods","validateState","register","userService","console","catch","title","variant","solid"],"sourceRoot":"src/views/Register","sources":["Register.vue"],"sourcesContent":["<template>\n  <div class=\"register\">\n    <b-row class=\"mt-5\">\n      <b-col md=\"8\" offset-md=\"2\" lg=\"6\" offset-lg=\"3\">\n    <b-card title=\"注册\">\n    <b-form >\n      <b-form-group label=\"姓名\">\n        <!-- 定义一个v的对象，根据我们定义的validation生成了属性，每个属性都有自己的model  -->\n       <b-form-input\n          v-model=\"$v.user.name.$model\"\n          type=\"text\"\n          required\n          placeholder=\"输入用户的名称(选填)\"\n        ></b-form-input>\n      </b-form-group>\n      <b-form-group label=\"手机号\">\n        <b-form-input\n          v-model=\"$v.user.telephone.$model\"\n          type=\"number\"\n          required\n          placeholder=\"输入手机号\"\n          :state=\"validateState('telephone')\"\n        ></b-form-input>\n        <b-form-invalid-feedback :state=\"validateState('telephone')\">\n          手机号必须为11位\n        </b-form-invalid-feedback>\n      </b-form-group>\n      <b-form-group label=\"密码\">\n        <b-form-input\n          v-model=\"$v.user.password.$model\"\n          type=\"password\"\n          required\n          placeholder=\"输入您的密码\"\n          :state=\"validateState('password')\"\n        ></b-form-input>\n        <b-form-invalid-feedback :state=\"validateState('password')\">\n          密码必须大于等于6位\n        </b-form-invalid-feedback>\n      </b-form-group>\n      <b-form-group>\n       <b-button @click=\"register\" variant=\"primary\" block>注册</b-button>  <!-- block让按钮占满容器-->\n      </b-form-group>\n    </b-form>\n    </b-card>\n      </b-col>\n    </b-row>\n  </div>\n</template>\n<script>\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { required, minLength,maxLength } from 'vuelidate/lib/validators';\n// import { required, minLength } from 'vuelidate/lib/validators';\n\n// const telephoneValidator = (value) => /^\\d(11)$/.test(value);\n// import customValidator from '@/helper/validator';\nimport storageService from '../../../service/storageService';\nimport userService from '../../../service/userService';\nexport default {\n  data() {\n    return {\n      user: {\n        name: '',\n        telephone: '',\n        password: '',\n      },\n      validation: null,\n    };\n  },\n  // vuelidate来验证当前的密码为多少位\n  validations: {\n    user: {\n      name: {\n      },\n      telephone: {\n        required,\n        // telephone: customValidator.telephoneValidator,\n        minLength: minLength(11),\n        maxLength: maxLength(11),\n      },\n      password: {\n        required,\n        minLength: minLength(6),\n      },\n    },\n  },\n  methods: {\n    validateState(name) {\n      // 这里是es6 解构赋值\n      const { $dirty, $error } = this.$v.user[name];\n      return $dirty ? !$error : null;\n    },\n    register() {\n      // 验证数据,在没有用户与表单交互的情况下依旧可以触发表单验证\n      this.$v.user.$touch();\n      if (this.$v.user.$anyError) {\n        return;\n      }\n      // 请求,监听9090端口\n      // const api = 'http://localhost:9090/api/auth/register';\n      // 返回用户填入的 name telephone password\n      // this.axios.post(api,{...this.user})\n      // userService.register(this.user)\n      userService.register(this.user).then((res) => { // 前面的register是用户输入完之后发给后端，then是执行接收到后端返回的数据以后,在后端的register之后\n        // 保存token\n        console.log(res.data);\n        this.$store.commit('userModule/SET_TOKEN', res.data.token);  // 将token储存在localstorage\n        // localStorage.setItem('token', res.data.token);  //将token储存在localstorage\n        // storageService.set(storageService.USER_TOKEN, res.data.token); // 将token储存在localstorage\n        userService.info().then(((response) => { // 从后端的info页面获取数据\n          // 保存用户信息\n          this.$store.commit('userModule/SET_USERINFO', response.data.data.user);  // 将用户信息储存在vuex中，代码在store/index 和module user.js中\n          // storageService.set(storageService.USER_INFO, JSON.stringify(response.data.data.user));\n          // 跳转主页\n          this.$router.replace({ name: 'home' });\n        }));\n      }).catch((err) => {\n        // 跳转失败,并出现弹窗显示数据验证失败\n        console.log('err:', err.response.data.msg);\n        this.$bvToast.toast(err.response.data.msg, {\n          title: '数据验证错误',\n          variant: 'danger',\n          solid: true,\n        });\n      });\n      console.log('register');\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module"}