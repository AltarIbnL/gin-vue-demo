{"ast":null,"code":"import \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport storageService from '../../../service/storageService';\nimport userService from '../../../service/userService';\nvar userModule = {\n  namespaced: true,\n  state: {\n    token: storageService.get(storageService.USER_TOKEN),\n    userInfo: JSON.parse(storageService.get(storageService.USER_INFO))\n  },\n  mutations: {\n    SET_TOKEN: function SET_TOKEN(state, token) {\n      // 更新本地缓存\n      storageService.set(storageService.USER_TOKEN, token); // 更新state\n\n      state.token = token;\n    },\n    SET_USERINFO: function SET_USERINFO(state, userInfo) {\n      // 更新本地缓存\n      storageService.set(storageService.USER_INFO, JSON.stringify(userInfo)); // 更新state\n\n      state.userInfo = userInfo;\n    }\n  },\n  actions: {\n    register: function register(context, _ref) {\n      var name = _ref.name,\n          telephoe = _ref.telephoe,\n          password = _ref.password;\n      return new Promise(function (resolve, reject) {\n        userService.register(name, telephoe, password).then(function (res) {\n          // 前面的register是用户输入完之后发给后端，then是执行接收到后端返回的数据以后,在后端的register之后\n          // 保存token\n          console.log(res.data);\n          context.commit('SET_TOKEN', res.data.token); // 将token 储存在vuex中，代码在store/index 和module user.js中\n          // this.$store.commit('userModule/SET_TOKEN', res.data.token);  // 将token 储存在vuex中，代码在store/index 和module user.js中\n          // localStorage.setItem('token', res.data.token);  //将token储存在localstorage\n          // storageService.set(storageService.USER_TOKEN, res.data.token); // 将token储存在localstorage\n\n          userService.info().then(function (response) {\n            // 从后端的info页面获取数据\n            // 保存用户信息\n            context.commit('SET_USERINFO', response.data.data.user); // 将用户信息储存在vuex中，代码在store/index 和module user.js中\n            // this.$store.commit('userModule/SET_USERINFO', response.data.data.user);  // 将用户信息储存在vuex中，代码在store/index 和module user.js中\n            // storageService.set(storageService.USER_INFO, JSON.stringify(response.data.data.user));\n\n            resolve(res);\n          });\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n  }\n};\nexport default userModule;","map":{"version":3,"names":["storageService","userService","userModule","namespaced","state","token","get","USER_TOKEN","userInfo","JSON","parse","USER_INFO","mutations","SET_TOKEN","set","SET_USERINFO","stringify","actions","register","context","name","telephoe","password","Promise","resolve","reject","then","res","console","log","data","commit","info","response","user","catch","err"],"sources":["E:/seafile/file/GO/pratical_practice/vue/vue/src/store/module/user.js"],"sourcesContent":["import storageService from '../../../service/storageService';\nimport userService from '../../../service/userService';\n\nconst userModule = {\n  namespaced: true,\n  state: {\n    token: storageService.get(storageService.USER_TOKEN),\n    userInfo: JSON.parse(storageService.get(storageService.USER_INFO)),\n  },\n  mutations: {\n    SET_TOKEN(state, token) {\n      // 更新本地缓存\n      storageService.set(storageService.USER_TOKEN, token);\n      // 更新state\n      state.token = token;\n    },\n    SET_USERINFO(state, userInfo) {\n      // 更新本地缓存\n      storageService.set(storageService.USER_INFO, JSON.stringify(userInfo));\n      // 更新state\n      state.userInfo = userInfo;\n    },\n  },\n  actions: {\n    register(context, { name, telephoe, password }) {\n      return new Promise((resolve, reject) => {\n        userService.register(name, telephoe, password).then((res) => { // 前面的register是用户输入完之后发给后端，then是执行接收到后端返回的数据以后,在后端的register之后\n          // 保存token\n          console.log(res.data);\n          context.commit('SET_TOKEN', res.data.token); // 将token 储存在vuex中，代码在store/index 和module user.js中\n          // this.$store.commit('userModule/SET_TOKEN', res.data.token);  // 将token 储存在vuex中，代码在store/index 和module user.js中\n          // localStorage.setItem('token', res.data.token);  //将token储存在localstorage\n          // storageService.set(storageService.USER_TOKEN, res.data.token); // 将token储存在localstorage\n          userService.info().then(((response) => { // 从后端的info页面获取数据\n            // 保存用户信息\n            context.commit('SET_USERINFO', response.data.data.user); // 将用户信息储存在vuex中，代码在store/index 和module user.js中\n            // this.$store.commit('userModule/SET_USERINFO', response.data.data.user);  // 将用户信息储存在vuex中，代码在store/index 和module user.js中\n            // storageService.set(storageService.USER_INFO, JSON.stringify(response.data.data.user));\n            resolve(res);\n          }));\n        }).catch((err) => {\n          reject(err);\n        });\n      });\n    },\n  },\n};\nexport default userModule;\n"],"mappings":";;;AAAA,OAAOA,cAAP,MAA2B,iCAA3B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AAEA,IAAMC,UAAU,GAAG;EACjBC,UAAU,EAAE,IADK;EAEjBC,KAAK,EAAE;IACLC,KAAK,EAAEL,cAAc,CAACM,GAAf,CAAmBN,cAAc,CAACO,UAAlC,CADF;IAELC,QAAQ,EAAEC,IAAI,CAACC,KAAL,CAAWV,cAAc,CAACM,GAAf,CAAmBN,cAAc,CAACW,SAAlC,CAAX;EAFL,CAFU;EAMjBC,SAAS,EAAE;IACTC,SADS,qBACCT,KADD,EACQC,KADR,EACe;MACtB;MACAL,cAAc,CAACc,GAAf,CAAmBd,cAAc,CAACO,UAAlC,EAA8CF,KAA9C,EAFsB,CAGtB;;MACAD,KAAK,CAACC,KAAN,GAAcA,KAAd;IACD,CANQ;IAOTU,YAPS,wBAOIX,KAPJ,EAOWI,QAPX,EAOqB;MAC5B;MACAR,cAAc,CAACc,GAAf,CAAmBd,cAAc,CAACW,SAAlC,EAA6CF,IAAI,CAACO,SAAL,CAAeR,QAAf,CAA7C,EAF4B,CAG5B;;MACAJ,KAAK,CAACI,QAAN,GAAiBA,QAAjB;IACD;EAZQ,CANM;EAoBjBS,OAAO,EAAE;IACPC,QADO,oBACEC,OADF,QACyC;MAAA,IAA5BC,IAA4B,QAA5BA,IAA4B;MAAA,IAAtBC,QAAsB,QAAtBA,QAAsB;MAAA,IAAZC,QAAY,QAAZA,QAAY;MAC9C,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;QACtCxB,WAAW,CAACiB,QAAZ,CAAqBE,IAArB,EAA2BC,QAA3B,EAAqCC,QAArC,EAA+CI,IAA/C,CAAoD,UAACC,GAAD,EAAS;UAAE;UAC7D;UACAC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;UACAX,OAAO,CAACY,MAAR,CAAe,WAAf,EAA4BJ,GAAG,CAACG,IAAJ,CAASzB,KAArC,EAH2D,CAGd;UAC7C;UACA;UACA;;UACAJ,WAAW,CAAC+B,IAAZ,GAAmBN,IAAnB,CAAyB,UAACO,QAAD,EAAc;YAAE;YACvC;YACAd,OAAO,CAACY,MAAR,CAAe,cAAf,EAA+BE,QAAQ,CAACH,IAAT,CAAcA,IAAd,CAAmBI,IAAlD,EAFqC,CAEoB;YACzD;YACA;;YACAV,OAAO,CAACG,GAAD,CAAP;UACD,CAND;QAOD,CAdD,EAcGQ,KAdH,CAcS,UAACC,GAAD,EAAS;UAChBX,MAAM,CAACW,GAAD,CAAN;QACD,CAhBD;MAiBD,CAlBM,CAAP;IAmBD;EArBM;AApBQ,CAAnB;AA4CA,eAAelC,UAAf"},"metadata":{},"sourceType":"module"}